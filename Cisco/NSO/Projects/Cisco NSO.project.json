{
  "_id": "66cf6f9521161b4df2717489",
  "name": "Cisco NSO",
  "description": "Cisco NSO project has assets to Provision Service, Provision with XML, Onboard Device, Sync From Devices, Send RESTCONF Request, Validate Configuration against NED",
  "components": [
    {
      "iid": 0,
      "reference": "98cee03e-a150-49f9-b992-3260e2312777",
      "type": "workflow",
      "folder": "/",
      "document": {
        "name": "Get Service Instance",
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 312,
              "y": 684
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 312,
              "y": 1224
            }
          },
          "2cd2": {
            "name": "getInstance",
            "canvasName": "getInstance",
            "summary": "Get Service Instance Details",
            "description": "Get service instance details",
            "location": "Application",
            "locationType": null,
            "app": "ServiceCog",
            "type": "automatic",
            "displayName": "Service Management",
            "variables": {
              "incoming": {
                "model": "$var.job.model",
                "value": "$var.job.key"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 312,
              "y": 792
            }
          },
          "dda": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Instance",
            "description": "Query instance from NSO results",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "$var.2e3f.output",
                "obj": "$var.2cd2.result"
              },
              "outgoing": {
                "return_data": "$var.job.serviceInstance"
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 312,
              "y": 1116
            }
          },
          "2e3f": {
            "name": "makeData",
            "canvasName": "makeData",
            "summary": "Generate Query",
            "description": "Generate instance query",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Tools",
            "variables": {
              "incoming": {
                "input": ":get(<!model!>)[0]",
                "outputType": "string",
                "variables": "$var.a3d2.merged_object"
              },
              "outgoing": {
                "output": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 312,
              "y": 1008
            }
          },
          "a3d2": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Model Input",
            "description": "Create an object that has model as a key",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "model",
                    "value": {
                      "task": "job",
                      "variable": "model",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 312,
              "y": 900
            }
          }
        },
        "transitions": {
          "5707": {},
          "workflow_start": {
            "2cd2": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "2cd2": {
            "a3d2": {
              "type": "standard",
              "state": "success"
            }
          },
          "dda": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "2e3f": {
            "dda": {
              "type": "standard",
              "state": "success"
            }
          },
          "a3d2": {
            "2e3f": {
              "type": "standard",
              "state": "success"
            }
          },
          "ab2e": {}
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "model": {
              "title": "model",
              "type": "string",
              "examples": ["testModel"]
            },
            "key": {
              "title": "value",
              "type": "string",
              "examples": ["1001"]
            }
          },
          "required": ["model", "key"]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "model": {
              "title": "model",
              "type": "string",
              "examples": ["testModel"]
            },
            "key": {
              "title": "value",
              "type": "string",
              "examples": ["1001"]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "serviceInstance": {
              "title": "return_data",
              "oneOf": [
                {
                  "type": "string"
                },
                {
                  "type": "number"
                },
                {
                  "type": "object"
                },
                {
                  "type": "array"
                },
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ],
              "examples": ["value"]
            }
          }
        },
        "type": "automation",
        "font_size": 12,
        "last_updated": "2025-01-24T10:47:33.290Z",
        "lastUpdatedVersion": "5.55.2-2023.2.13",
        "createdVersion": "5.44.8-2021.2.40.0",
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "created": "1970-01-01T00:00:00.000Z",
        "canvasVersion": 3,
        "created_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "iid": 1,
      "reference": "d0d3745a-25f7-4978-a146-dbef4f6ee74e",
      "type": "workflow",
      "folder": "/",
      "document": {
        "name": "Onboard Device",
        "tasks": {
          "108": {
            "name": "syncFrom",
            "canvasName": "syncFrom",
            "summary": "Sync From Device",
            "description": "Sync configurations from a specific device",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "name": "$var.job.deviceName",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 900,
              "y": 1116
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 900,
              "y": 684
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 900,
              "y": 1236
            }
          },
          "adc1": {
            "name": "addDevice",
            "canvasName": "addDevice",
            "summary": "Add Device",
            "description": "Provision a new device for management within Cisco NSO",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "deviceInfo": "$var.428a.merged_object",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 900,
              "y": 900
            }
          },
          "b30a": {
            "name": "fetchSSHKey",
            "canvasName": "fetchSSHKey",
            "summary": "Fetch Device SSH Key",
            "description": "Retrieve the public ssh key from a remote server.",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "device": "$var.job.deviceName",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 900,
              "y": 1008
            }
          },
          "428a": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Build Device Payload",
            "description": "",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "name",
                    "value": {
                      "task": "job",
                      "variable": "deviceName",
                      "editable": true
                    }
                  },
                  {
                    "key": "address",
                    "value": {
                      "task": "job",
                      "variable": "ipAddress",
                      "editable": true
                    }
                  },
                  {
                    "key": "port",
                    "value": {
                      "task": "job",
                      "variable": "port",
                      "editable": true
                    }
                  },
                  {
                    "key": "authgroup",
                    "value": {
                      "task": "job",
                      "variable": "authgroup",
                      "editable": true
                    }
                  },
                  {
                    "key": "device-type",
                    "value": {
                      "task": "job",
                      "variable": "deviceType",
                      "editable": true
                    }
                  },
                  {
                    "key": "ned",
                    "value": {
                      "task": "job",
                      "variable": "ned",
                      "editable": true
                    }
                  },
                  {
                    "key": "protocol",
                    "value": {
                      "task": "job",
                      "variable": "protocol",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 900,
              "y": 792
            }
          }
        },
        "transitions": {
          "108": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "428a": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "adc1": {
            "b30a": {
              "type": "standard",
              "state": "success"
            }
          },
          "b30a": {
            "108": {
              "type": "standard",
              "state": "success"
            }
          },
          "428a": {
            "adc1": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "deviceName": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "ipAddress": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "port": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "authgroup": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "deviceType": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "ned": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "protocol": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            }
          },
          "required": [
            "deviceName",
            "adapterId",
            "ipAddress",
            "port",
            "authgroup",
            "deviceType",
            "ned",
            "protocol"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "deviceName": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "ipAddress": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "port": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "authgroup": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "deviceType": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "ned": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "protocol": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "type": "automation",
        "font_size": 12,
        "last_updated": "2025-01-24T10:47:33.291Z",
        "lastUpdatedVersion": "5.55.2-2023.2.13",
        "createdVersion": "5.40.5-2021.1.109.0",
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "created": "1970-01-01T00:00:00.000Z",
        "canvasVersion": 3,
        "created_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "iid": 2,
      "reference": "a23b7191-9d3f-42ad-9794-487db77f760b",
      "type": "workflow",
      "folder": "/Provision Service",
      "document": {
        "name": "Provision Service",
        "tasks": {
          "9124": {
            "name": "saveInstances",
            "canvasName": "saveInstances",
            "summary": "Provision Service",
            "description": "Save instances with an option.",
            "location": "Application",
            "locationType": null,
            "app": "ServiceCog",
            "type": "automatic",
            "displayName": "Service Management",
            "variables": {
              "incoming": {
                "instance": "$var.70d6.textObject",
                "options": {
                  "sync": true,
                  "action": "replace"
                }
              },
              "outgoing": {
                "result": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1032,
              "y": 1020
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 696,
              "y": 540
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 684,
              "y": 1416
            }
          },
          "f858": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Generate NSO Service",
            "description": "Generate NSO Service",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "$var.job.templateName",
                "context": "$var.job.templateVars"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 696,
              "y": 660
            }
          },
          "bd5": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Template String",
            "description": "Query Template String",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "renderedTemplate",
                "obj": "$var.f858.renderedTemplate"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 696,
              "y": 792
            }
          },
          "70d6": {
            "name": "parse",
            "canvasName": "parse",
            "summary": "Parse NSO Service Instance JSON",
            "description": "Parses NSO service instance JSON",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "String",
            "variables": {
              "incoming": {
                "text": "$var.bd5.return_data"
              },
              "outgoing": {
                "textObject": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 696,
              "y": 900
            }
          },
          "f00": {
            "name": "testInstances",
            "canvasName": "testInstances",
            "summary": "Perform Service Instance Dry Run",
            "description": "Perform service instance dry run",
            "location": "Application",
            "locationType": null,
            "app": "ServiceCog",
            "type": "automatic",
            "displayName": "Service Management",
            "variables": {
              "incoming": {
                "instance": "$var.70d6.textObject",
                "options": {
                  "action": "replace",
                  "sync": true
                }
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 696,
              "y": 1140
            }
          },
          "101a": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Check If Perform Dry Run",
            "description": "Check if performing dry run",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "performDryRun",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        }
                      },
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "result",
                          "task": "f00"
                        },
                        "operator": "contains",
                        "operand_2": {
                          "variable": "SUCCESS",
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 696,
              "y": 1020
            }
          },
          "78e2": {
            "name": "ViewTestService",
            "canvasName": "ViewTestService",
            "summary": "View Dry Run Results",
            "description": "View Dry Run Results",
            "location": "Application",
            "app": "ServiceCog",
            "displayName": "Service Management",
            "type": "manual",
            "variables": {
              "incoming": {
                "dry_run_results": "$var.f00.result"
              },
              "outgoing": {
                "dry_run_results": null
              },
              "error": ""
            },
            "view": "/service_management/task/ViewTestService",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 696,
              "y": 1272
            }
          },
          "607b": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Error",
            "description": "View provisioning error",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Provisioning Error",
                "message": "Provisioning Error! Retry or Abort",
                "body": "$var.9124.error",
                "variables": {},
                "btn_success": "Retry",
                "btn_failure": "Abort"
              },
              "outgoing": {},
              "error": ""
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1020,
              "y": 1320
            }
          }
        },
        "transitions": {
          "9124": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            },
            "607b": {
              "type": "standard",
              "state": "error"
            }
          },
          "workflow_start": {
            "f858": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "f858": {
            "bd5": {
              "type": "standard",
              "state": "success"
            }
          },
          "bd5": {
            "70d6": {
              "type": "standard",
              "state": "success"
            }
          },
          "70d6": {
            "101a": {
              "state": "success",
              "type": "standard"
            }
          },
          "f00": {
            "78e2": {
              "state": "success",
              "type": "standard"
            }
          },
          "101a": {
            "9124": {
              "type": "standard",
              "state": "failure"
            },
            "f00": {
              "state": "success",
              "type": "standard"
            }
          },
          "78e2": {
            "9124": {
              "type": "standard",
              "state": "success"
            },
            "f858": {
              "type": "revert",
              "state": "failure"
            }
          },
          "607b": {
            "f858": {
              "type": "revert",
              "state": "success"
            },
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "templateName": {
              "type": "string",
              "examples": [
                "Template name 1",
                "Template name 2",
                "Template name 3"
              ]
            },
            "templateVars": {
              "type": "object",
              "examples": [
                {
                  "name": "John",
                  "DOB": "2000/1/1"
                }
              ]
            },
            "performDryRun": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            }
          },
          "required": ["templateName", "templateVars", "performDryRun"]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "templateName": {
              "type": "string",
              "examples": [
                "Template name 1",
                "Template name 2",
                "Template name 3"
              ]
            },
            "templateVars": {
              "type": "object",
              "examples": [
                {
                  "name": "John",
                  "DOB": "2000/1/1"
                }
              ]
            },
            "performDryRun": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "type": "automation",
        "font_size": 12,
        "last_updated": "2025-01-24T10:47:33.292Z",
        "lastUpdatedVersion": "5.55.2-2023.2.13",
        "createdVersion": "5.29.14-2020.2.18.0",
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "created": "1970-01-01T00:00:00.000Z",
        "canvasVersion": 3,
        "created_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "iid": 3,
      "reference": "3ad5707d-69c3-48bf-8c98-458f410f8258",
      "type": "workflow",
      "folder": "/Provision with XML",
      "document": {
        "name": "Provision with XML",
        "tasks": {
          "3": {
            "name": "dryRunXML",
            "canvasName": "dryRunXML",
            "summary": "Commit Dry-Run",
            "description": "Send XML to NSO to commit dry-run.",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "payload": "$var.2ad3.return_data",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -120,
              "y": 1332
            }
          },
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": -108,
              "y": 852
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": -144,
              "y": 1632
            }
          },
          "9faa": {
            "name": "provisionXML",
            "canvasName": "provisionXML",
            "summary": "Provision XML",
            "description": "Send XML to NSO to commit.",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "payload": "$var.2ad3.return_data",
                "options": "$var.job.provisionOptions",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 180,
              "y": 1332
            }
          },
          "7e30": {
            "name": "renderJinjaTemplate",
            "canvasName": "renderJinjaTemplate",
            "summary": "Generate XML Payload",
            "description": "Generate XML Payload",
            "location": "Application",
            "locationType": null,
            "app": "TemplateBuilder",
            "type": "automatic",
            "displayName": "TemplateBuilder",
            "variables": {
              "incoming": {
                "name": "$var.job.templateName",
                "context": "$var.job.templateVariables"
              },
              "outgoing": {
                "renderedTemplate": null
              },
              "error": ""
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": -108,
              "y": 972
            }
          },
          "8c3": {
            "name": "ViewTestService",
            "canvasName": "ViewTestService",
            "summary": "View Dry Run Results",
            "description": "View Dry Run Results",
            "location": "Application",
            "app": "ServiceCog",
            "displayName": "Service Management",
            "type": "manual",
            "variables": {
              "incoming": {
                "dry_run_results": "$var.3.result"
              },
              "outgoing": {
                "dry_run_results": null
              },
              "error": ""
            },
            "view": "/service_management/task/ViewTestService",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -120,
              "y": 1464
            }
          },
          "2ad3": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Template",
            "description": "Query template from jinja response",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "renderedTemplate",
                "obj": "$var.7e30.renderedTemplate"
              },
              "outgoing": {
                "return_data": null
              },
              "error": ""
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": -108,
              "y": 1104
            }
          },
          "f68": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Check If Perform Dry Run",
            "description": "Run an evaluation to determine if dry run",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "performDryRun",
                          "task": "job",
                          "editable": true
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": true,
                          "task": "static"
                        }
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": -108,
              "y": 1212
            }
          },
          "a53": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Error",
            "description": "View NSO Provision XML Error",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "Tools",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Provision Error",
                "message": "The provisioning took an error, retry or abort?",
                "body": "$var.9faa.error",
                "variables": {},
                "btn_success": "Retry",
                "btn_failure": "Abort"
              },
              "outgoing": {},
              "error": ""
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 504,
              "y": 1332
            }
          }
        },
        "transitions": {
          "3": {
            "8c3": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_start": {
            "7e30": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "9faa": {
            "a53": {
              "type": "standard",
              "state": "error"
            },
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "7e30": {
            "2ad3": {
              "type": "standard",
              "state": "success"
            }
          },
          "8c3": {
            "9faa": {
              "type": "standard",
              "state": "success"
            },
            "7e30": {
              "type": "revert",
              "state": "failure"
            }
          },
          "2ad3": {
            "f68": {
              "type": "standard",
              "state": "success"
            }
          },
          "f68": {
            "3": {
              "type": "standard",
              "state": "success"
            },
            "9faa": {
              "type": "standard",
              "state": "failure"
            }
          },
          "a53": {
            "workflow_end": {
              "type": "standard",
              "state": "failure"
            },
            "9faa": {
              "type": "revert",
              "state": "success"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "provisionOptions": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "templateName": {
              "type": "string",
              "examples": [
                "Template name 1",
                "Template name 2",
                "Template name 3"
              ]
            },
            "templateVariables": {
              "type": "object",
              "examples": [
                {
                  "name": "John",
                  "DOB": "2000/1/1"
                }
              ]
            },
            "performDryRun": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            }
          },
          "required": [
            "adapterId",
            "provisionOptions",
            "templateName",
            "templateVariables",
            "performDryRun"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "provisionOptions": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "templateName": {
              "type": "string",
              "examples": [
                "Template name 1",
                "Template name 2",
                "Template name 3"
              ]
            },
            "templateVariables": {
              "type": "object",
              "examples": [
                {
                  "name": "John",
                  "DOB": "2000/1/1"
                }
              ]
            },
            "performDryRun": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "type": "automation",
        "font_size": 12,
        "last_updated": "2025-01-24T10:47:33.293Z",
        "lastUpdatedVersion": "5.55.2-2023.2.13",
        "createdVersion": "5.10.4-2020.1.45.0",
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "created": "1970-01-01T00:00:00.000Z",
        "canvasVersion": 3,
        "created_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "iid": 4,
      "reference": "3378c769-a74a-4775-91c2-b75025d7e6a3",
      "type": "workflow",
      "folder": "/",
      "document": {
        "name": "Send RESTCONF Request",
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 1464,
              "y": 732
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 1464,
              "y": 1152
            }
          },
          "244e": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Build RESTCONF Params Payload",
            "description": "Build the RESTCONF params object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "path",
                    "value": {
                      "task": "job",
                      "variable": "path",
                      "editable": true
                    }
                  },
                  {
                    "key": "contentType",
                    "value": {
                      "task": "job",
                      "variable": "contentType",
                      "editable": true
                    }
                  },
                  {
                    "key": "accept",
                    "value": {
                      "task": "job",
                      "variable": "accept",
                      "editable": true
                    }
                  },
                  {
                    "key": "method",
                    "value": {
                      "task": "job",
                      "variable": "method",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1464,
              "y": 864
            }
          },
          "51cf": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Error",
            "description": "Display error for action.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "RESTCONF Error",
                "message": "The RESTCONF task has failed.",
                "body": "$var.73e6.error",
                "variables": "",
                "btn_success": "End Job",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1776,
              "y": 984
            }
          },
          "73e6": {
            "name": "restAction",
            "canvasName": "restAction",
            "summary": "Send RESTCONF Request",
            "description": "Send RESTCONF Request",
            "location": "Application",
            "locationType": null,
            "app": "NSOManager",
            "type": "automatic",
            "displayName": "NSOManager",
            "variables": {
              "incoming": {
                "adapterId": "$var.job.adapterId",
                "params": "$var.244e.merged_object",
                "body": "$var.job.body"
              },
              "outgoing": {
                "result": "$var.job.requestResult"
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1464,
              "y": 984
            }
          }
        },
        "transitions": {
          "workflow_start": {
            "244e": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "244e": {
            "73e6": {
              "type": "standard",
              "state": "success"
            }
          },
          "51cf": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "73e6": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            },
            "51cf": {
              "type": "standard",
              "state": "error"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "contentType": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "accept": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "method": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "adapterId": {
              "title": "Input string for an adapter",
              "description": "An input document for a adapterId",
              "type": "string",
              "pattern": "[A-Za-z]+",
              "examples": ["sample adapterId"]
            },
            "body": {
              "title": "body",
              "type": "object",
              "example": {}
            }
          },
          "required": [
            "path",
            "contentType",
            "accept",
            "method",
            "adapterId",
            "body"
          ]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "path": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "contentType": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "accept": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "method": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "adapterId": {
              "title": "Input string for an adapter",
              "description": "An input document for a adapterId",
              "type": "string",
              "pattern": "[A-Za-z]+",
              "examples": ["sample adapterId"]
            },
            "body": {
              "title": "body",
              "type": "object",
              "example": {}
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            },
            "requestResult": {
              "title": "result",
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "result": {
                    "type": "string",
                    "examples": ["204"]
                  }
                }
              }
            }
          }
        },
        "type": "automation",
        "font_size": 12,
        "last_updated": "2025-01-24T10:47:33.292Z",
        "lastUpdatedVersion": "5.55.2-2023.2.13",
        "createdVersion": "5.44.8-2021.2.40.0",
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "created": "1970-01-01T00:00:00.000Z",
        "canvasVersion": 3,
        "created_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "iid": 5,
      "reference": "74011c76-8832-4410-85a7-6ef1f1b596aa",
      "type": "workflow",
      "folder": "/",
      "document": {
        "name": "Send Run Action Request",
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 1452,
              "y": 684
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 1452,
              "y": 1068
            }
          },
          "bf5b": {
            "name": "runAction",
            "canvasName": "runAction",
            "summary": "Run Action",
            "description": "Run an action in NSO (Network Services Orchestrator).The possible actions are the ones in itential_tools",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "params": "$var.244e.merged_object",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "response": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1452,
              "y": 936
            }
          },
          "244e": {
            "name": "merge",
            "canvasName": "merge",
            "summary": "Merge Inputs",
            "description": "Build action params object",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "data_to_merge": [
                  {
                    "key": "path",
                    "value": {
                      "task": "job",
                      "variable": "path",
                      "editable": true
                    }
                  },
                  {
                    "key": "params",
                    "value": {
                      "task": "job",
                      "variable": "params",
                      "editable": true
                    }
                  }
                ]
              },
              "outgoing": {
                "merged_object": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1452,
              "y": 816
            }
          },
          "51cf": {
            "name": "ViewData",
            "canvasName": "ViewData",
            "summary": "View Error",
            "description": "Display error for action.",
            "location": "Application",
            "app": "WorkFlowEngine",
            "displayName": "WorkFlowEngine",
            "type": "manual",
            "variables": {
              "incoming": {
                "header": "Action Error",
                "message": "The action has failed.",
                "body": "$var.bf5b.error",
                "variables": "",
                "btn_success": "End Job",
                "btn_failure": ""
              },
              "outgoing": {},
              "error": "",
              "decorators": []
            },
            "view": "/workflow_engine/task/ViewData",
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1812,
              "y": 936
            }
          }
        },
        "transitions": {
          "workflow_start": {
            "244e": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "bf5b": {
            "51cf": {
              "type": "standard",
              "state": "error"
            },
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "244e": {
            "bf5b": {
              "type": "standard",
              "state": "success"
            }
          },
          "51cf": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "path": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "params": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            }
          },
          "required": ["adapterId", "path", "params"]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "path": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "params": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "type": "automation",
        "font_size": 12,
        "last_updated": "2025-01-24T10:47:33.293Z",
        "lastUpdatedVersion": "5.55.2-2023.2.13",
        "createdVersion": "5.44.8-2021.2.40.0",
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "created": "1970-01-01T00:00:00.000Z",
        "canvasVersion": 3,
        "created_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "iid": 6,
      "reference": "53fdd282-f8c7-4e44-b0f3-45a9aef36d04",
      "type": "workflow",
      "folder": "/",
      "document": {
        "name": "Sync From Devices",
        "tasks": {
          "workflow_start": {
            "name": "workflow_start",
            "groups": [],
            "nodeLocation": {
              "x": 1956,
              "y": 564
            }
          },
          "workflow_end": {
            "name": "workflow_end",
            "groups": [],
            "nodeLocation": {
              "x": 1956,
              "y": 1140
            }
          },
          "4d0c": {
            "name": "syncFromDevices",
            "canvasName": "syncFromDevices",
            "summary": "Sync Devices",
            "description": "Attempt to sync devices that are not in-sync",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "devices": "$var.c79c.return_data",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "result": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1620,
              "y": 1008
            }
          },
          "82b": {
            "name": "checkSyncDevices",
            "canvasName": "checkSyncDevices",
            "summary": "Perform Check-Sync On Device List",
            "description": "Perform check-sync on a list of the devices. Each device will be sent to NSO in parallel and the result of each check-sync will be returned in the same order",
            "location": "Adapter",
            "locationType": "NSO",
            "app": "NSO",
            "type": "automatic",
            "displayName": "NSO",
            "variables": {
              "incoming": {
                "devices": "$var.job.devices",
                "adapter_id": "$var.job.adapterId"
              },
              "outgoing": {
                "sync_statuses": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1956,
              "y": 684
            }
          },
          "744b": {
            "name": "evaluation",
            "canvasName": "evaluation",
            "summary": "Check If All Devices Are In-Sync",
            "description": "Run an evaluation to identify if any devices are not in sync",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "all_true_flag": false,
                "evaluation_groups": [
                  {
                    "all_true_flag": false,
                    "evaluations": [
                      {
                        "query": "",
                        "operand_1": {
                          "variable": "length",
                          "task": "db07"
                        },
                        "operator": "==",
                        "operand_2": {
                          "variable": 0,
                          "task": "static"
                        },
                        "rightQuery": ""
                      }
                    ]
                  }
                ]
              },
              "outgoing": {
                "return_value": null
              }
            },
            "groups": [],
            "nodeLocation": {
              "x": 1956,
              "y": 1008
            }
          },
          "c79c": {
            "name": "query",
            "canvasName": "query",
            "summary": "Query Devices Out Of Sync",
            "description": "Query out-of-sync devices from NSO check-sync result",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "operation",
            "displayName": "WorkFlowEngine",
            "variables": {
              "incoming": {
                "pass_on_null": false,
                "query": "value[*syncstatus!~/^in-sync$/].devicename",
                "obj": "$var.82b.sync_statuses"
              },
              "outgoing": {
                "return_data": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "scheduled": false,
            "nodeLocation": {
              "x": 1956,
              "y": 792
            }
          },
          "db07": {
            "name": "arrayLength",
            "canvasName": "length",
            "summary": "Get Length Of Out-of-sync Device List",
            "description": "Get the length of the out-of-sync device array",
            "location": "Application",
            "locationType": null,
            "app": "WorkFlowEngine",
            "type": "automatic",
            "displayName": "Array",
            "variables": {
              "incoming": {
                "arr": "$var.c79c.return_data"
              },
              "outgoing": {
                "length": null
              },
              "error": "",
              "decorators": []
            },
            "groups": [],
            "actor": "Pronghorn",
            "scheduled": false,
            "nodeLocation": {
              "x": 1956,
              "y": 900
            }
          }
        },
        "transitions": {
          "workflow_start": {
            "82b": {
              "type": "standard",
              "state": "success"
            }
          },
          "workflow_end": {},
          "4d0c": {
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "82b": {
            "c79c": {
              "type": "standard",
              "state": "success"
            }
          },
          "744b": {
            "4d0c": {
              "type": "standard",
              "state": "failure"
            },
            "workflow_end": {
              "type": "standard",
              "state": "success"
            }
          },
          "c79c": {
            "db07": {
              "type": "standard",
              "state": "success"
            }
          },
          "db07": {
            "744b": {
              "type": "standard",
              "state": "success"
            }
          }
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "devices": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            }
          },
          "required": ["adapterId", "devices"]
        },
        "outputSchema": {
          "type": "object",
          "properties": {
            "adapterId": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "devices": {
              "type": ["array", "boolean", "null", "number", "object", "string"]
            },
            "_id": {
              "type": "string",
              "pattern": "^[0-9a-f]{24}$"
            },
            "initiator": {
              "type": "string"
            }
          }
        },
        "type": "automation",
        "font_size": 12,
        "last_updated": "2025-01-24T10:47:33.294Z",
        "lastUpdatedVersion": "5.55.2-2023.2.13",
        "createdVersion": "5.44.8-2021.2.40.0",
        "preAutomationTime": 0,
        "sla": 0,
        "last_updated_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "created": "1970-01-01T00:00:00.000Z",
        "canvasVersion": 3,
        "created_by": {
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false,
          "sso": true,
          "nameID": "admin@itential"
        },
        "tags": [],
        "groups": [],
        "migrationVersion": 3
      }
    },
    {
      "iid": 8,
      "reference": "63d447db8982791db525009c",
      "type": "template",
      "folder": "/Provision with XML",
      "document": {
        "_id": "63d447db8982791db525009c",
        "command": "",
        "template": "<devices xmlns=\"http://tail-f.com/ns/ncs\">\n    <device>\n        <name>{{device}}</name>\n        <description>{{description}}</description>\n    </device>\n</devices>",
        "type": "jinja2",
        "name": "NSO - Device Description",
        "version": 1,
        "tags": [],
        "data": "{\n    \"device\":\"juniper-1234\",\n    \"description\":\"new device\"\n}",
        "group": "NSO",
        "description": "",
        "created": "2024-02-08T21:01:34.538Z",
        "lastUpdated": "2025-01-24T10:47:33.294Z",
        "createdBy": null,
        "lastUpdatedBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false
        }
      }
    },
    {
      "iid": 9,
      "reference": "63b8a7b4b88358310dcb6b72",
      "type": "template",
      "folder": "/Provision Service",
      "document": {
        "_id": "63b8a7b4b88358310dcb6b72",
        "command": "",
        "template": "{\n  \"/ncs:services/itential-demo-port-turn-up:port-turn-up\": [\n    {\n      \"device\": \"{{device}}\",\n      \"interface-type\": \"GigabitEthernet\",\n      \"interface-id\": \"{{interfaceId}}\",\n      \"description\": \"{{description}}\",\n      \"allowed-vlan\":\"100\"\n    }\n  ]\n}",
        "type": "jinja2",
        "name": "NSO - Provision Service",
        "version": 1,
        "tags": [],
        "data": "{\n    \"device\": \"IOS\",\n    \"description\": \"service description\",\n    \"interfaceId\": \"1/1\"\n}",
        "group": "NSO",
        "description": "",
        "created": "2024-02-08T20:20:12.900Z",
        "lastUpdated": "2025-01-24T10:47:33.295Z",
        "createdBy": null,
        "lastUpdatedBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential",
          "firstname": "admin@itential",
          "inactive": false
        }
      }
    },
    {
      "iid": 10,
      "reference": "5f1e1e7f655a0306dde634b2",
      "type": "transformation",
      "folder": "/Validate Configuration against NED",
      "document": {
        "_id": "5f1e1e7f655a0306dde634b2",
        "name": "Remove Duplicates From Array of Primitives - IAP",
        "description": "",
        "incoming": [
          {
            "$id": "array",
            "type": "array",
            "items": {
              "type": ["boolean", "number", "integer", "string", "null"]
            }
          }
        ],
        "outgoing": [
          {
            "$id": "uniqueArray",
            "type": "array",
            "items": {
              "type": ["boolean", "number", "integer", "string", "null"]
            }
          }
        ],
        "steps": [
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "array",
              "ptr": ""
            },
            "to": {
              "location": "declaration",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 1,
            "type": "declaration",
            "library": "Set",
            "method": "new Set",
            "args": [null],
            "view": {
              "row": 1,
              "col": 1
            },
            "summary": "Converting to Set removes duplicates"
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "declaration",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "method",
              "name": 3,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "method",
            "library": "Array",
            "method": "from",
            "args": [null],
            "view": {
              "row": 1,
              "col": 2
            },
            "summary": "Convert Set back to Array"
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 3,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "uniqueArray",
              "ptr": ""
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 2,
          "row": 5
        },
        "created": "2025-01-15T18:37:17.805Z",
        "createdBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential"
        },
        "lastUpdated": "2025-01-24T10:47:33.297Z",
        "lastUpdatedBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "iid": 11,
      "reference": "61786120973116442d19fc40",
      "type": "transformation",
      "folder": "/Validate Configuration against NED",
      "document": {
        "_id": "61786120973116442d19fc40",
        "name": "Generate Output",
        "description": "",
        "incoming": [
          {
            "$id": "NED_ADAPTER",
            "type": "string",
            "examples": ["NED_Adapter_Combo"]
          },
          {
            "$id": "Commands",
            "type": "string",
            "examples": ["test"]
          },
          {
            "$id": "results",
            "type": "object",
            "properties": {
              "path_raw": {
                "type": "string",
                "examples": ["/itential_commands/verify_config"]
              },
              "path_evaluated": {
                "type": "string",
                "examples": ["/itential_commands/verify_config"]
              },
              "params": {
                "type": "object",
                "properties": {
                  "ned_id": {
                    "type": "string",
                    "examples": ["cisco-ios-cli-6%2E74"]
                  },
                  "commands": {
                    "type": "string",
                    "examples": [
                      "interface GigabitEthernet 0/0/0\n description 1234"
                    ]
                  }
                },
                "required": []
              },
              "response": {
                "type": "object",
                "properties": {
                  "jsonrpc": {
                    "type": "string",
                    "examples": ["2%2E0"]
                  },
                  "result": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "examples": ["response"]
                        },
                        "value": {
                          "type": "string",
                          "examples": ["Config is valid"]
                        }
                      },
                      "required": []
                    }
                  },
                  "id": {
                    "type": "integer",
                    "examples": [1]
                  }
                },
                "required": []
              },
              "result": {
                "type": "boolean",
                "examples": [true, false]
              }
            },
            "required": []
          }
        ],
        "outgoing": [
          {
            "$id": "results",
            "type": "string",
            "examples": ["string"]
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "template",
            "library": "String",
            "method": "templateLiteral",
            "template": "Using\n${ned_adapter}\n\nThese Commands\n${Commands}\n\n\nReturned this result\n${results}",
            "args": [null, null, null],
            "view": {
              "row": 2,
              "col": 3
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "NED_ADAPTER",
              "ptr": ""
            },
            "to": {
              "location": "template",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "Commands",
              "ptr": ""
            },
            "to": {
              "location": "template",
              "name": 1,
              "ptr": "/args/1/value"
            }
          },
          {
            "id": 5,
            "type": "assign",
            "from": {
              "location": "template",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "results",
              "ptr": ""
            }
          },
          {
            "id": 6,
            "type": "method",
            "library": "WorkFlowEngine",
            "method": "query",
            "args": [false, "result.[0].value", null],
            "view": {
              "row": 3,
              "col": 2
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 6,
              "ptr": "/return"
            },
            "to": {
              "location": "template",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "results",
              "ptr": "/response"
            },
            "to": {
              "location": "method",
              "name": 6,
              "ptr": "/args/2/value"
            }
          }
        ],
        "functions": [],
        "comments": [],
        "view": {
          "col": 7,
          "row": 5
        },
        "created": "2025-01-15T18:36:34.057Z",
        "createdBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential"
        },
        "lastUpdated": "2025-01-24T10:47:33.302Z",
        "lastUpdatedBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    },
    {
      "iid": 12,
      "reference": "61784486973116442d19fc3f",
      "type": "transformation",
      "folder": "/Validate Configuration against NED",
      "document": {
        "_id": "61784486973116442d19fc3f",
        "name": "Generate Adapter_NED Listing",
        "description": "",
        "incoming": [
          {
            "$id": "NED_LIST",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "ned_id": {
                  "type": "string",
                  "examples": ["cisco-ios-cli-6%2E74"]
                },
                "name": {
                  "type": "string",
                  "examples": ["cisco-ios"]
                },
                "version": {
                  "type": "string",
                  "examples": ["6%2E74%2E11"]
                }
              },
              "required": []
            }
          },
          {
            "$id": "currentAdapter",
            "type": "string",
            "examples": ["Local NSO"]
          }
        ],
        "outgoing": [
          {
            "$id": "output_list",
            "type": "array",
            "items": {
              "type": "string",
              "examples": ["1"]
            }
          },
          {
            "$id": "adapterNedObject",
            "type": "array",
            "items": {
              "type": "string",
              "examples": ["1"]
            }
          }
        ],
        "steps": [
          {
            "id": 1,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [null, "buildAdapterNedString", null],
            "view": {
              "row": 1,
              "col": 2
            }
          },
          {
            "id": 2,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "NED_LIST",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 3,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "currentAdapter",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 1,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 4,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 1,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "output_list",
              "ptr": ""
            }
          },
          {
            "id": 5,
            "type": "method",
            "library": "Array",
            "method": "map",
            "args": [null, "buildAdapterNedObj", null],
            "view": {
              "row": 2,
              "col": 2
            }
          },
          {
            "id": 6,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "NED_LIST",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 5,
              "ptr": "/args/0/value"
            }
          },
          {
            "id": 7,
            "type": "assign",
            "from": {
              "location": "incoming",
              "name": "currentAdapter",
              "ptr": ""
            },
            "to": {
              "location": "method",
              "name": 5,
              "ptr": "/args/2/value"
            }
          },
          {
            "id": 8,
            "type": "assign",
            "from": {
              "location": "method",
              "name": 5,
              "ptr": "/return"
            },
            "to": {
              "location": "outgoing",
              "name": "adapterNedObject",
              "ptr": ""
            }
          }
        ],
        "functions": [
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "ned_id": {
                    "type": "string",
                    "examples": ["cisco-ios-cli-6%2E74"]
                  },
                  "name": {
                    "type": "string",
                    "examples": ["cisco-ios"]
                  },
                  "version": {
                    "type": "string",
                    "examples": ["6%2E74%2E11"]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ned_id": {
                      "type": "string",
                      "examples": ["cisco-ios-cli-6%2E74"]
                    },
                    "name": {
                      "type": "string",
                      "examples": ["cisco-ios"]
                    },
                    "version": {
                      "type": "string",
                      "examples": ["6%2E74%2E11"]
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "template",
                "library": "String",
                "method": "templateLiteral",
                "template": "ADAPTER: ${Adapter}  NED: ${nedID}",
                "args": [null, null],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "template",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 3,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/ned_id"
                },
                "to": {
                  "location": "template",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 4,
                "type": "assign",
                "from": {
                  "location": "template",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              }
            ],
            "functions": [],
            "name": "buildAdapterNedString",
            "view": {
              "col": 4,
              "row": 5
            },
            "id": "buildAdapterNedString",
            "comments": []
          },
          {
            "incoming": [
              {
                "type": "object",
                "properties": {
                  "ned_id": {
                    "type": "string",
                    "examples": ["cisco-ios-cli-6%2E74"]
                  },
                  "name": {
                    "type": "string",
                    "examples": ["cisco-ios"]
                  },
                  "version": {
                    "type": "string",
                    "examples": ["6%2E74%2E11"]
                  }
                },
                "required": [],
                "$id": "currentValue"
              },
              {
                "title": "index",
                "type": "number",
                "optional": true,
                "$id": "index"
              },
              {
                "$id": "array",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ned_id": {
                      "type": "string",
                      "examples": ["cisco-ios-cli-6%2E74"]
                    },
                    "name": {
                      "type": "string",
                      "examples": ["cisco-ios"]
                    },
                    "version": {
                      "type": "string",
                      "examples": ["6%2E74%2E11"]
                    }
                  },
                  "required": []
                },
                "optional": true
              },
              {
                "$id": "constantValue1",
                "type": "string",
                "isConstValue": true
              }
            ],
            "outgoing": [
              {
                "title": "newValue",
                "type": [
                  "array",
                  "boolean",
                  "number",
                  "integer",
                  "string",
                  "object",
                  "null"
                ],
                "editable": true,
                "$id": "newValue"
              }
            ],
            "steps": [
              {
                "id": 1,
                "type": "template",
                "library": "String",
                "method": "templateLiteral",
                "template": "{\"listing\":\"ADAPTER: ${adapter}  NED: ${nedID}\",\n\"adapter\":\"${adapter}\",\n\"nedid\":\"${nedID}\"}",
                "args": [null, null],
                "view": {
                  "row": 2,
                  "col": 2
                }
              },
              {
                "id": 2,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "currentValue",
                  "ptr": "/ned_id"
                },
                "to": {
                  "location": "template",
                  "name": 1,
                  "ptr": "/args/1/value"
                }
              },
              {
                "id": 4,
                "type": "method",
                "library": "JSON",
                "method": "parse",
                "args": [null, null],
                "view": {
                  "row": 2,
                  "col": 3
                }
              },
              {
                "id": 5,
                "type": "assign",
                "from": {
                  "location": "template",
                  "name": 1,
                  "ptr": "/return"
                },
                "to": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/args/0/value"
                }
              },
              {
                "id": 6,
                "type": "assign",
                "from": {
                  "location": "method",
                  "name": 4,
                  "ptr": "/return"
                },
                "to": {
                  "location": "outgoing",
                  "name": "newValue",
                  "ptr": ""
                }
              },
              {
                "id": 7,
                "type": "assign",
                "from": {
                  "location": "incoming",
                  "name": "constantValue1",
                  "ptr": ""
                },
                "to": {
                  "location": "template",
                  "name": 1,
                  "ptr": "/args/0/value"
                }
              }
            ],
            "functions": [],
            "name": "buildAdapterNedObj",
            "view": {
              "col": 4,
              "row": 5
            },
            "id": "buildAdapterNedObj",
            "comments": []
          }
        ],
        "comments": [],
        "view": {
          "col": 3,
          "row": 5
        },
        "created": "2025-01-15T18:36:34.058Z",
        "createdBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential"
        },
        "lastUpdated": "2025-01-24T10:47:33.295Z",
        "lastUpdatedBy": {
          "_id": "66d1e2b552e6dc384b5d6626",
          "provenance": "Okta",
          "username": "admin@itential"
        },
        "version": "4.3.6-2023.2.5",
        "tags": []
      }
    }
  ],
  "folders": [
    {
      "iid": 5,
      "nodeType": "component"
    },
    {
      "nodeType": "folder",
      "name": "Provision with XML",
      "children": [
        {
          "iid": 3,
          "nodeType": "component"
        },
        {
          "iid": 8,
          "nodeType": "component"
        }
      ]
    },
    {
      "nodeType": "folder",
      "name": "Provision Service",
      "children": [
        {
          "iid": 2,
          "nodeType": "component"
        },
        {
          "iid": 9,
          "nodeType": "component"
        }
      ]
    },
    {
      "iid": 0,
      "nodeType": "component"
    },
    {
      "iid": 1,
      "nodeType": "component"
    },
    {
      "iid": 6,
      "nodeType": "component"
    },
    {
      "iid": 4,
      "nodeType": "component"
    },
    {
      "nodeType": "folder",
      "name": "Validate Configuration against NED",
      "children": [
        {
          "iid": 10,
          "nodeType": "component"
        },
        {
          "iid": 12,
          "nodeType": "component"
        },
        {
          "iid": 11,
          "nodeType": "component"
        }
      ]
    }
  ],
  "created": "2024-08-28T18:42:29.891Z",
  "createdBy": {
    "_id": "6786b32af921f091fd105007",
    "provenance": "Local AAA",
    "username": "admin@itential"
  },
  "lastUpdated": "2025-01-24T10:47:33.278Z",
  "lastUpdatedBy": {
    "_id": "66d1e2b552e6dc384b5d6626",
    "provenance": "Okta",
    "username": "admin@itential"
  },
  "iid": 40,
  "thumbnail": "",
  "backgroundColor": "#FFFFFF"
}
